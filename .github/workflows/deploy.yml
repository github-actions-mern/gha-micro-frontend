name: deploy to eks
on:
  push:
    branches:
      - main
env:
  IMAGE_NAME: "gh-micro-frontend"
  REPO: "susah80"
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      OUTPUT_IMAGE_TAG: ${{ steps.image_out_step.outputs.OUTPUT_IMAGE_TAG }}
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get image tag from package.json
        run: |
          echo "IMAGE_TAG=$(node -p "require('./package.json').version")" >> "$GITHUB_ENV"

      - name: Set full image env
        run: |
          echo "FULL_IMAGE=${REPO}/$IMAGE_NAME:${{ env.IMAGE_TAG }}" >> "$GITHUB_ENV"

      - name: Build, tag, and push docker image to docker hub
        run: |
          docker build  -t ${{ env.FULL_IMAGE }}  -f Dockerfile.prod .
          docker push ${{ env.FULL_IMAGE }}

      - name: Output image tag
        id: image_out_step
        run: |
          echo "OUTPUT_IMAGE_TAG=${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      OUTPUT_IMAGE_TAG: ${{ needs.build.outputs.OUTPUT_IMAGE_TAG }}
    steps:
      - name: output image env
        run: |
          echo "OUTPUT_IMAGE_TAG: ${OUTPUT_IMAGE_TAG}"

      - name: Get Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: set full image
        run: |
          echo "FULL_IMAGE=${REPO}/${IMAGE_NAME}:${OUTPUT_IMAGE_TAG}" >> "$GITHUB_ENV"

      - name: Display full image
        run: |
          echo "${{ env.FULL_IMAGE }}"

      - name: Update kube config
        run: aws eks update-kubeconfig --name my-github-cluster

      - name: Deploy to EKS
        run: |
          sed s=FULL_IMAGE=${{ env.FULL_IMAGE }}=  k8s/deployment.yaml | kubectl apply -f -
